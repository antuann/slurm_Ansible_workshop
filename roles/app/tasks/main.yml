---
# tasks file for app
- name: "creating a user {{ app_app_user}}"
  ansible.builtin.user:
    name: "{{ app_app_user }}"
    comment: "user for start app"
    create_home: true
    shell: /bin/bash


- name: Add authorized key {{ app_public_ssh_key }} for user {{ app_app_user }}
  authorized_key:
    user: "{{ app_app_user }}"
    state: present
    key: "{{ lookup('file', '{{ app_public_ssh_key }}') }}"

- name: "copy application files to /opt"
  ansible.builtin.unarchive:
    src: xpaste_practicum.tar.gz
    dest: /opt

- name: "grant user rights to application files"
  ansible.builtin.file:
    path: /opt/xpaste_practicum
    state: directory
    recurse: true
    owner: "{{ app_app_user }}"
    group: "{{ app_app_user }}"

- name: "creating a service file for the application"
  ansible.builtin.template:
    src: templates/app.service.j2
    dest: /etc/systemd/system/app.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart app

- name: "creating a launch file for the application"
  ansible.builtin.template:
    src: templates/start.sh.j2
    dest: /opt/xpaste_practicum/bin/start.sh
    owner: "{{ app_app_user }}"
    group: "{{ app_app_user }}"
    mode: 0755
  notify:
    - Restart app
    
- name: Enabled Service app
  ansible.builtin.service:
    name: app
    enabled: yes
    state: stopped
  notify:
    - Restart app
    

- name: "instal package"
  ansible.builtin.yum:
    name:
      - git-core 
      - zlib 
      - zlib-devel 
      - gcc-c++
      - patch
      - readline
      - readline-devel
      - libyaml-devel
      - libffi-devel
      - openssl-devel
      - make
      - bzip2
      - autoconf
      - automake
      - libtool
      - bison
      - curl
      - sqlite-devel
      - postgresql-devel.x86_64
  when: ansible_os_family == 'RedHat'

- name: "instal package"
  ansible.builtin.apt:
    name:
      - git
      - curl
      - libssl-dev
      - libreadline-dev
      - zlib1g-dev
      - autoconf
      - bison
      - build-essential
      - libyaml-dev
      - libreadline-dev
      - libncurses5-dev
      - libffi-dev
      - libgdbm-dev
      - nodejs
  when: ansible_os_family == 'Debian'

- name: "get rbenv from git https://github.com/rbenv/rbenv.git"
  ansible.builtin.git:
    repo: https://github.com/rbenv/rbenv.git
    dest: /opt/rbenv
    update: no

- name: "get rbenv-vars from git https://github.com/rbenv/rbenv-vars.git"
  ansible.builtin.git:
    repo: https://github.com/rbenv/rbenv-vars.git
    dest: /opt/rbenv/plugins/rbenv-vars
    update: no

- name: "get ruby-build from git https://github.com/rbenv/ruby-build.git"
  ansible.builtin.git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: /opt/rbenv/plugins/ruby-build
    update: no

- name: "paths for rben executable files will be added to users bash profiles"
  ansible.builtin.copy:
    src: files/path_rbenv.sh
    dest: /etc/profile.d/path_rbenv.sh
    owner: root
    group: root
    mode: 0755
  
- name: "I add the RBENV_ROOT variable to /etc/enviroment"
  ansible.builtin.lineinfile:
    path: /etc/enviroment
    line: 'RBENV_ROOT=/opt/rbenv'
    create: yes

- name: "in /etc/enviroment we correct the RBENV_ROOT variable if it is not correct"
  ansible.builtin.lineinfile:
    dest: /etc/enviroment
    state: present
    regexp: '^RBENV_ROOT'
    line: 'RBENV_ROOT=/opt/rbenv'

- name: "allow {{ app_user }} user to edit the /opt/rbenv directory"
  ansible.builtin.file:
    path: /opt/rbenv
    state: directory
    recurse: true
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
  
- name: "ruby {{ version_ruby }} install"
  ansible.builtin.script: scripts/install_ruby.sh {{ version_ruby }}
  ignore_errors: true
  notify:
    - Restart app

- name: "ruby {{ version_ruby }} install"
  ansible.builtin.script: scripts/centos_install_nodejs.sh {{ version_ruby }}
  ignore_errors: true
  notify:
    - Restart app
  when: ansible_os_family == 'RedHat'

